package com.todociber.appbolsadevalores.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.todociber.appbolsadevalores.db.Mensajes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MENSAJES.
*/
public class MensajesDao extends AbstractDao<Mensajes, Long> {

    public static final String TABLENAME = "MENSAJES";

    /**
     * Properties of entity Mensajes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdMensaje = new Property(1, String.class, "idMensaje", false, "ID_MENSAJE");
        public final static Property TipoMensaje = new Property(2, String.class, "tipoMensaje", false, "TIPO_MENSAJE");
        public final static Property IdUsuario = new Property(3, String.class, "idUsuario", false, "ID_USUARIO");
        public final static Property NombreUsuario = new Property(4, String.class, "nombreUsuario", false, "NOMBRE_USUARIO");
        public final static Property Mensaje = new Property(5, String.class, "mensaje", false, "MENSAJE");
        public final static Property IdOrden = new Property(6, String.class, "idOrden", false, "ID_ORDEN");
    };


    public MensajesDao(DaoConfig config) {
        super(config);
    }
    
    public MensajesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MENSAJES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_MENSAJE' TEXT," + // 1: idMensaje
                "'TIPO_MENSAJE' TEXT," + // 2: tipoMensaje
                "'ID_USUARIO' TEXT," + // 3: idUsuario
                "'NOMBRE_USUARIO' TEXT," + // 4: nombreUsuario
                "'MENSAJE' TEXT," + // 5: mensaje
                "'ID_ORDEN' TEXT);"); // 6: idOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MENSAJES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Mensajes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idMensaje = entity.getIdMensaje();
        if (idMensaje != null) {
            stmt.bindString(2, idMensaje);
        }
 
        String tipoMensaje = entity.getTipoMensaje();
        if (tipoMensaje != null) {
            stmt.bindString(3, tipoMensaje);
        }
 
        String idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindString(4, idUsuario);
        }
 
        String nombreUsuario = entity.getNombreUsuario();
        if (nombreUsuario != null) {
            stmt.bindString(5, nombreUsuario);
        }
 
        String mensaje = entity.getMensaje();
        if (mensaje != null) {
            stmt.bindString(6, mensaje);
        }
 
        String idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindString(7, idOrden);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Mensajes readEntity(Cursor cursor, int offset) {
        Mensajes entity = new Mensajes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idMensaje
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tipoMensaje
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idUsuario
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nombreUsuario
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mensaje
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // idOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Mensajes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdMensaje(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTipoMensaje(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdUsuario(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNombreUsuario(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMensaje(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdOrden(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Mensajes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Mensajes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
