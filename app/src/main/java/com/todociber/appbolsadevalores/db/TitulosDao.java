package com.todociber.appbolsadevalores.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.todociber.appbolsadevalores.db.Titulos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TITULOS.
*/
public class TitulosDao extends AbstractDao<Titulos, Long> {

    public static final String TABLENAME = "TITULOS";

    /**
     * Properties of entity Titulos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdTitulo = new Property(1, String.class, "idTitulo", false, "ID_TITULO");
        public final static Property NombreTitulo = new Property(2, String.class, "nombreTitulo", false, "NOMBRE_TITULO");
        public final static Property TasaDeInteres = new Property(3, String.class, "tasaDeInteres", false, "TASA_DE_INTERES");
        public final static Property IdEmisor = new Property(4, String.class, "idEmisor", false, "ID_EMISOR");
        public final static Property IdTipoTitulo = new Property(5, String.class, "idTipoTitulo", false, "ID_TIPO_TITULO");
    };


    public TitulosDao(DaoConfig config) {
        super(config);
    }
    
    public TitulosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TITULOS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_TITULO' TEXT," + // 1: idTitulo
                "'NOMBRE_TITULO' TEXT," + // 2: nombreTitulo
                "'TASA_DE_INTERES' TEXT," + // 3: tasaDeInteres
                "'ID_EMISOR' TEXT," + // 4: idEmisor
                "'ID_TIPO_TITULO' TEXT);"); // 5: idTipoTitulo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TITULOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Titulos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idTitulo = entity.getIdTitulo();
        if (idTitulo != null) {
            stmt.bindString(2, idTitulo);
        }
 
        String nombreTitulo = entity.getNombreTitulo();
        if (nombreTitulo != null) {
            stmt.bindString(3, nombreTitulo);
        }
 
        String tasaDeInteres = entity.getTasaDeInteres();
        if (tasaDeInteres != null) {
            stmt.bindString(4, tasaDeInteres);
        }
 
        String idEmisor = entity.getIdEmisor();
        if (idEmisor != null) {
            stmt.bindString(5, idEmisor);
        }
 
        String idTipoTitulo = entity.getIdTipoTitulo();
        if (idTipoTitulo != null) {
            stmt.bindString(6, idTipoTitulo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Titulos readEntity(Cursor cursor, int offset) {
        Titulos entity = new Titulos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idTitulo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombreTitulo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tasaDeInteres
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idEmisor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // idTipoTitulo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Titulos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdTitulo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombreTitulo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTasaDeInteres(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdEmisor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdTipoTitulo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Titulos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Titulos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
