package com.todociber.appbolsadevalores.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.todociber.appbolsadevalores.db.TipoMercado;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TIPO_MERCADO.
*/
public class TipoMercadoDao extends AbstractDao<TipoMercado, Long> {

    public static final String TABLENAME = "TIPO_MERCADO";

    /**
     * Properties of entity TipoMercado.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdTipoMercado = new Property(1, String.class, "idTipoMercado", false, "ID_TIPO_MERCADO");
        public final static Property NombreMercado = new Property(2, String.class, "nombreMercado", false, "NOMBRE_MERCADO");
    };


    public TipoMercadoDao(DaoConfig config) {
        super(config);
    }
    
    public TipoMercadoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TIPO_MERCADO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_TIPO_MERCADO' TEXT," + // 1: idTipoMercado
                "'NOMBRE_MERCADO' TEXT);"); // 2: nombreMercado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TIPO_MERCADO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TipoMercado entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idTipoMercado = entity.getIdTipoMercado();
        if (idTipoMercado != null) {
            stmt.bindString(2, idTipoMercado);
        }
 
        String nombreMercado = entity.getNombreMercado();
        if (nombreMercado != null) {
            stmt.bindString(3, nombreMercado);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TipoMercado readEntity(Cursor cursor, int offset) {
        TipoMercado entity = new TipoMercado( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idTipoMercado
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // nombreMercado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TipoMercado entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdTipoMercado(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombreMercado(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TipoMercado entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TipoMercado entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
