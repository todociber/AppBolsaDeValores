package com.todociber.appbolsadevalores.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.todociber.appbolsadevalores.db.OperacionesBolsa;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OPERACIONES_BOLSA.
*/
public class OperacionesBolsaDao extends AbstractDao<OperacionesBolsa, Long> {

    public static final String TABLENAME = "OPERACIONES_BOLSA";

    /**
     * Properties of entity OperacionesBolsa.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdOperacion = new Property(1, String.class, "idOperacion", false, "ID_OPERACION");
        public final static Property MontoOperacion = new Property(2, String.class, "montoOperacion", false, "MONTO_OPERACION");
        public final static Property IdOrden = new Property(3, String.class, "idOrden", false, "ID_ORDEN");
    };


    public OperacionesBolsaDao(DaoConfig config) {
        super(config);
    }
    
    public OperacionesBolsaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OPERACIONES_BOLSA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_OPERACION' TEXT," + // 1: idOperacion
                "'MONTO_OPERACION' TEXT," + // 2: montoOperacion
                "'ID_ORDEN' TEXT);"); // 3: idOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OPERACIONES_BOLSA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OperacionesBolsa entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idOperacion = entity.getIdOperacion();
        if (idOperacion != null) {
            stmt.bindString(2, idOperacion);
        }
 
        String montoOperacion = entity.getMontoOperacion();
        if (montoOperacion != null) {
            stmt.bindString(3, montoOperacion);
        }
 
        String idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindString(4, idOrden);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OperacionesBolsa readEntity(Cursor cursor, int offset) {
        OperacionesBolsa entity = new OperacionesBolsa( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idOperacion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // montoOperacion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // idOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OperacionesBolsa entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdOperacion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMontoOperacion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdOrden(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OperacionesBolsa entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OperacionesBolsa entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
