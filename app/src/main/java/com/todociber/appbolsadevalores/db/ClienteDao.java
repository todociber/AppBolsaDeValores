package com.todociber.appbolsadevalores.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.todociber.appbolsadevalores.db.Cliente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CLIENTE.
*/
public class ClienteDao extends AbstractDao<Cliente, Long> {

    public static final String TABLENAME = "CLIENTE";

    /**
     * Properties of entity Cliente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUsuario = new Property(1, Integer.class, "idUsuario", false, "ID_USUARIO");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Apellido = new Property(3, String.class, "apellido", false, "APELLIDO");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property IdCliente = new Property(5, String.class, "idCliente", false, "ID_CLIENTE");
        public final static Property DUI = new Property(6, String.class, "DUI", false, "DUI");
        public final static Property NIT = new Property(7, String.class, "NIT", false, "NIT");
        public final static Property FechaDeNacimiento = new Property(8, String.class, "FechaDeNacimiento", false, "FECHA_DE_NACIMIENTO");
        public final static Property Token = new Property(9, String.class, "token", false, "TOKEN");
    };


    public ClienteDao(DaoConfig config) {
        super(config);
    }
    
    public ClienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_USUARIO' INTEGER," + // 1: idUsuario
                "'NOMBRE' TEXT," + // 2: nombre
                "'APELLIDO' TEXT," + // 3: apellido
                "'EMAIL' TEXT," + // 4: email
                "'ID_CLIENTE' TEXT," + // 5: idCliente
                "'DUI' TEXT," + // 6: DUI
                "'NIT' TEXT," + // 7: NIT
                "'FECHA_DE_NACIMIENTO' TEXT," + // 8: FechaDeNacimiento
                "'TOKEN' TEXT);"); // 9: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cliente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindLong(2, idUsuario);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        String apellido = entity.getApellido();
        if (apellido != null) {
            stmt.bindString(4, apellido);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String idCliente = entity.getIdCliente();
        if (idCliente != null) {
            stmt.bindString(6, idCliente);
        }
 
        String DUI = entity.getDUI();
        if (DUI != null) {
            stmt.bindString(7, DUI);
        }
 
        String NIT = entity.getNIT();
        if (NIT != null) {
            stmt.bindString(8, NIT);
        }
 
        String FechaDeNacimiento = entity.getFechaDeNacimiento();
        if (FechaDeNacimiento != null) {
            stmt.bindString(9, FechaDeNacimiento);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(10, token);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cliente readEntity(Cursor cursor, int offset) {
        Cliente entity = new Cliente( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idUsuario
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apellido
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idCliente
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DUI
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NIT
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FechaDeNacimiento
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // token
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cliente entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUsuario(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApellido(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdCliente(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDUI(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNIT(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFechaDeNacimiento(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cliente entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cliente entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
